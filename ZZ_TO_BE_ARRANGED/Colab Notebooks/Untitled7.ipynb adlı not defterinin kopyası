{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled7.ipynb adlı not defterinin kopyası","provenance":[{"file_id":"1LXEViR7xq2-_ic1g8pVCHr8lf7eeNl4j","timestamp":1619530127468}],"authorship_tag":"ABX9TyMPHXw1oINT67GGguqGemIu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"ItXcgFA1a2wJ"},"source":["import pandas as pd"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":180},"id":"GO4j-aYrb4EM","executionInfo":{"status":"error","timestamp":1619528801941,"user_tz":-180,"elapsed":725,"user":{"displayName":"Hüseyin KURT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjEN7R0L4L2YSh8JwGITwNFifiLqZIMgdKsswp7bQ=s64","userId":"17608980851986316151"}},"outputId":"d2428697-5e31-46ca-b21d-7934813d3f49"},"source":["#pd.read_csv(\"01.csv\");"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-2aa8e11c87ad>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpwd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m#pd.read_csv(\"01.csv\");\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'pwd' is not defined"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JufVoO_9XLdP","executionInfo":{"status":"ok","timestamp":1619527767272,"user_tz":-180,"elapsed":8859,"user":{"displayName":"Hüseyin KURT","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjEN7R0L4L2YSh8JwGITwNFifiLqZIMgdKsswp7bQ=s64","userId":"17608980851986316151"}},"outputId":"10e6960c-d0b9-44d9-9c3c-bac2eefa79d2"},"source":["# multivariate multi-step stacked lstm example\n","from numpy import array\n","from numpy import hstack\n","from keras.models import Sequential\n","from keras.layers import LSTM\n","from keras.layers import Dense\n","\n","# split a multivariate sequence into samples\n","def split_sequences(sequences, n_steps_in, n_steps_out):\n","\tX, y = list(), list()\n","\tfor i in range(len(sequences)):\n","\t\t# find the end of this pattern\n","\t\tend_ix = i + n_steps_in\n","\t\tout_end_ix = end_ix + n_steps_out-1\n","\t\t# check if we are beyond the dataset\n","\t\tif out_end_ix > len(sequences):\n","\t\t\tbreak\n","\t\t# gather input and output parts of the pattern\n","\t\tseq_x, seq_y = sequences[i:end_ix, :-1], sequences[end_ix-1:out_end_ix, -1]\n","\t\tX.append(seq_x)\n","\t\ty.append(seq_y)\n","\treturn array(X), array(y)\n","\n","# define input sequence\n","#in_seq1 = array([10, 20, 30, 40, 50, 60, 70, 80, 90])\n","#in_seq2 = array([15, 25, 35, 45, 55, 65, 75, 85, 95])\n","#out_seq = array([in_seq1[i]+in_seq2[i] for i in range(len(in_seq1))])\n","# convert to [rows, columns] structure\n","in_seq1 = in_seq1.reshape((len(in_seq1), 1))\n","in_seq2 = in_seq2.reshape((len(in_seq2), 1))\n","out_seq = out_seq.reshape((len(out_seq), 1))\n","# horizontally stack columns\n","dataset = hstack((in_seq1, in_seq2, out_seq))\n","# choose a number of time steps\n","n_steps_in, n_steps_out = 3, 2\n","# covert into input/output\n","X, y = split_sequences(dataset, n_steps_in, n_steps_out)\n","# the dataset knows the number of features, e.g. 2\n","n_features = X.shape[2]\n","# define model\n","model = Sequential()\n","model.add(LSTM(100, activation='relu', return_sequences=True, input_shape=(n_steps_in, n_features)))\n","model.add(LSTM(100, activation='relu'))\n","model.add(Dense(n_steps_out))\n","model.compile(optimizer='adam', loss='mse')\n","# fit model\n","model.fit(X, y, epochs=200, verbose=0)\n","# demonstrate prediction\n","x_input = array([[70, 75], [80, 85], [90, 95]])\n","x_input = x_input.reshape((1, n_steps_in, n_features))\n","yhat = model.predict(x_input, verbose=0)\n","print(yhat)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[186.60338 207.05882]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"LzEejHlLYMWh"},"source":["# Yeni Bölüm"]}]}